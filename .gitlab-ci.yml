# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  DATABASE_URL: "sqlite://sqlite_dummy.db"

  KUBERNETES_CPU_REQUEST: 400m
  KUBERNETES_CPU_LIMIT: 12000m
  KUBERNETES_MEMORY_REQUEST: 2Gi
  KUBERNETES_MEMORY_LIMIT: 8Gi

stages:
  - sast
  - build
  - check
  - test

sast:
  stage: sast
include:
  - template: Security/SAST.gitlab-ci.yml

build:
  cache:
    key: binaries-cache
    paths:
      - core/target/*
  image: rust:latest
  stage: build
  script:
    - apt-get update
    - apt-get install -y cmake pkg-config libssl-dev liblapack-dev libblas-dev
    - cd core
    - cargo check

ingest:
  cache:
    key: binaries-cache
    paths:
      - core/target/*
  image: rust:latest
  stage: check
  script:
    - apt-get update
    - apt-get install -y cmake pkg-config libssl-dev liblapack-dev libblas-dev
    - cd core
    - cargo check --no-default-features --features ingest

server:
  cache:
    key: binaries-cache
    paths:
      - core/target/*
  image: rust:latest
  stage: check
  script:
    - apt-get update
    - apt-get install -y cmake pkg-config libssl-dev liblapack-dev libblas-dev
    - cd core
    - cargo check --no-default-features --features server

face:
  variables:
    CUDA_PATH: "/usr/local/cuda"
  cache:
    key: faiss-cache
    paths:
      - face/target/*
  cache:
    key: rustup
    paths:
      - /root/.cargo
  cache:
    key: apt
    paths:
      - /var/cache/apt/archives
  image: nvidia/cuda:12.3.2-devel-ubuntu22.04
  stage: check
  tags:
    - CUDA
  script:
    - apt update
    - apt install -y pkg-config libssl-dev liblapack-dev libblas-dev curl wget
    - apt remove -y --purge --auto-remove cmake
    - apt update 
    - apt install -y software-properties-common lsb-release && \
    - apt clean all
    - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
    - apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
    - apt update
    - apt install -y kitware-archive-keyring
    - rm /etc/apt/trusted.gpg.d/kitware.gpg
    - apt update
    - apt install -y cmake   
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - cd face-service
    - $HOME/.cargo/bin/cargo check

breeder:
  cache:
    key: binaries-cache
    paths:
      - core/target/*
  image: rust:latest
  stage: check
  script:
    - apt-get update
    - apt-get install -y cmake pkg-config libssl-dev liblapack-dev libblas-dev
    - cd core
    - cargo check --no-default-features --features breeder

test:
  cache:
    key: binaries-cache
    paths:
      - core/target/*
  image: rust:latest
  stage: test
  script:
    - apt-get update
    - apt-get install -y cmake pkg-config libssl-dev liblapack-dev libblas-dev
    - cd core
    - "cargo test --package omnipedia --bin omnipedia --no-default-features --features breeder -- breeder::operator::"
